services:
  # Aplicação Principal RAG-Demo
  rag-demo-app:
    build: .
    container_name: rag-demo-app
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - FLASK_ENV=development
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - MODEL_QA_GENERATOR=${MODEL_QA_GENERATOR}
      # Configurações do PostgreSQL
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chat_memory
      - POSTGRES_USER=chat_user
      - POSTGRES_PASSWORD=chat_password
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - qdrant
      - minio
      - n8n
      - postgres
    networks:
      - rag-network

  # Qdrant Vector Database
  qdrant:
    container_name: qdrant
    image: qdrant/qdrant:v1.7.3
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - ./volumes/qdrant:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag-network

  # MinIO para armazenamento de arquivos
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - rag-network

  # PostgreSQL - Memória do Chat para n8n
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=chat_memory
      - POSTGRES_USER=chat_user
      - POSTGRES_PASSWORD=chat_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_user -d chat_memory"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - rag-network

  # n8n - Automação e Orquestração de Workflows
  n8n:
    container_name: n8n
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://n8n:5678/
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console
      - N8N_METRICS=true
      - N8N_RUNNERS_ENABLED=true
      # Configurações do PostgreSQL para memória do chat
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=chat_memory
      - DB_POSTGRESDB_USER=chat_user
      - DB_POSTGRESDB_PASSWORD=chat_password
    volumes:
      - ./volumes/n8n:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rag-network

networks:
  rag-network:
    driver: bridge 